{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nadav Kaduri\\\\Desktop\\\\Projects\\\\Yammie app\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState } from 'react';\nimport Header from './components/Header/Header';\nimport NewOrder from './components/NewOrder/NewOrder';\nimport Modal from './components/UI/Modal';\nimport classes from './components/UI/ModalMessageContent.module.css';\nimport Menu from './menu';\nimport ModalErrorContent from './components/Modals/ModalErrorContent';\nimport ModalSuccessContent from './components/Modals/ModalSuccessContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [successMessageIsShown, setMessageSuccessIsShown] = useState(false);\n  const [confirmMessageIsShown, setConfirmMessageIsShown] = useState(false);\n  const [errorMessageIsShown, setErrorMessageIsShown] = useState(false);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [totalCalories, setTotalCalories] = useState(0);\n  const [error, setError] = useState(false);\n\n  const showSuccessMessageHandler = () => {\n    setMessageSuccessIsShown(true);\n  };\n\n  const hideSuccessMessageHandler = () => {\n    setMessageSuccessIsShown(false);\n  };\n\n  const showConfirmMessageHandler = () => {\n    setConfirmMessageIsShown(true);\n  };\n\n  const hideConfirmMessageHandler = () => {\n    setConfirmMessageIsShown(false);\n  };\n\n  const showErrorMessageHandler = () => {\n    setErrorMessageIsShown(true);\n  };\n\n  const hideErrorMessageHandler = () => {\n    setErrorMessageIsShown(false);\n  };\n\n  const addOrderHandler = order => {\n    console.log(\"entered addOrderHandler!!\");\n    setMessageContent(order);\n    showConfirmMessageHandler();\n  };\n\n  async function confirmOrder(order) {\n    console.log(\"entered confirmOrder!!\");\n    setError(false); // check if all inputs are valid\n\n    for (const value of Object.values(order)) {\n      if (value === \"\") {\n        setError(true);\n        break;\n      }\n    } // send order to the server\n\n\n    if (!error) {\n      try {\n        const response = await fetch('http://localhost:3000/order', {\n          method: 'POST',\n          body: JSON.stringify(order),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await response.json();\n\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n\n        console.log(data);\n        showSuccessMessageHandler();\n      } catch (error) {\n        setError(true);\n      }\n    } else {\n      showErrorMessageHandler();\n      hideConfirmMessageHandler();\n    }\n  } // function for updating total price and total calories for the requested order\n\n\n  const setMessageContent = order => {\n    let mainDish = order[\"main dish\"];\n    let sideDish = order[\"side dish\"];\n    let drink = order[\"drink\"];\n    setTotalPrice(parseInt(Menu[\"main dish\"][mainDish][\"price\"]) + parseInt(Menu[\"side dish\"][sideDish][\"price\"]) + parseInt(Menu[\"drink\"][drink][\"price\"]));\n    setTotalCalories(parseInt(Menu[\"main dish\"][mainDish][\"calories\"]) + parseInt(Menu[\"side dish\"][sideDish][\"calories\"]) + parseInt(Menu[\"drink\"][drink][\"calories\"]));\n  };\n\n  const ModalConfirmContent = props => {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.total,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" Total Price is : \", totalPrice, \"\\u20AA \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.total,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" Total Calories is : \", totalCalories, \" kcal  \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button,\n          onClick: props.onClose,\n          children: \" Cancel \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.button,\n          children: \" Confirm \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), confirmMessageIsShown && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(ModalConfirmContent, {\n        onClose: hideConfirmMessageHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 40\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 33\n    }, this), !error && successMessageIsShown && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(ModalSuccessContent, {\n        onClose: hideSuccessMessageHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 43\n    }, this), error && errorMessageIsShown && !confirmMessageIsShown && /*#__PURE__*/_jsxDEV(Modal, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(ModalErrorContent, {\n        onClose: hideErrorMessageHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 75\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 67\n    }, this), /*#__PURE__*/_jsxDEV(NewOrder, {\n      onConfirmOrder: confirmOrder,\n      onAddOrder: addOrderHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Z+tTq6SSGvSyi4BtXx9vP4tpUcE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useState","Header","NewOrder","Modal","classes","Menu","ModalErrorContent","ModalSuccessContent","App","successMessageIsShown","setMessageSuccessIsShown","confirmMessageIsShown","setConfirmMessageIsShown","errorMessageIsShown","setErrorMessageIsShown","totalPrice","setTotalPrice","totalCalories","setTotalCalories","error","setError","showSuccessMessageHandler","hideSuccessMessageHandler","showConfirmMessageHandler","hideConfirmMessageHandler","showErrorMessageHandler","hideErrorMessageHandler","addOrderHandler","order","console","log","setMessageContent","confirmOrder","value","Object","values","response","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","mainDish","sideDish","drink","parseInt","ModalConfirmContent","props","total","actions","button","onClose"],"sources":["C:/Users/Nadav Kaduri/Desktop/Projects/Yammie app/client/src/App.js"],"sourcesContent":["import {Fragment, useState} from 'react';\nimport Header from './components/Header/Header'\nimport NewOrder from './components/NewOrder/NewOrder';\nimport Modal from './components/UI/Modal';\nimport classes from './components/UI/ModalMessageContent.module.css';\nimport Menu from './menu';\nimport ModalErrorContent from './components/Modals/ModalErrorContent';\nimport ModalSuccessContent from './components/Modals/ModalSuccessContent';\n\nfunction App() {\n\n  const [successMessageIsShown, setMessageSuccessIsShown] = useState(false);\n  const [confirmMessageIsShown, setConfirmMessageIsShown] = useState(false);\n  const [errorMessageIsShown, setErrorMessageIsShown] = useState(false);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [totalCalories, setTotalCalories] = useState(0);\n  const [error, setError] = useState(false);\n\n  \n  const showSuccessMessageHandler = ()=> {\n    setMessageSuccessIsShown(true);\n  }\n  const hideSuccessMessageHandler = ()=> {\n    setMessageSuccessIsShown(false);\n  }\n\n  const showConfirmMessageHandler = ()=> {\n    setConfirmMessageIsShown(true);\n  }\n  const hideConfirmMessageHandler = ()=> {\n    setConfirmMessageIsShown(false);\n  }\n\n  const showErrorMessageHandler = ()=> {\n    setErrorMessageIsShown(true);\n  }\n  const hideErrorMessageHandler = ()=> {\n    setErrorMessageIsShown(false);\n  }\n\n  const addOrderHandler = (order)=> {\n    console.log(\"entered addOrderHandler!!\");\n    setMessageContent(order);\n    showConfirmMessageHandler();\n  }; \n\n  async function confirmOrder(order) {\n    console.log(\"entered confirmOrder!!\");\n    setError(false);\n    // check if all inputs are valid\n    for (const value of Object.values(order)) {\n      if(value === \"\"){\n          setError(true);\n          break;\n      }\n    }\n    // send order to the server\n    if(!error){\n      try{\n        const response = await fetch('http://localhost:3000/order', {\n          method: 'POST',\n          body: JSON.stringify(order),\n          headers: {\n            'Content-Type' : 'application/json'\n          }\n        });\n        const data = await response.json();\n        if(!response.ok){\n          throw new Error('something went wrong!');\n        }\n        console.log(data);\n        showSuccessMessageHandler();\n      }\n      catch(error){\n          setError(true);\n      }  \n    }\n    else{\n      showErrorMessageHandler();\n      hideConfirmMessageHandler();\n    } \n  }\n\n  // function for updating total price and total calories for the requested order\n  const setMessageContent = (order)=>{\n    let mainDish = order[\"main dish\"];\n    let sideDish = order[\"side dish\"];\n    let drink = order[\"drink\"];\n\n    setTotalPrice(parseInt(Menu[\"main dish\"][mainDish][\"price\"]) + parseInt(Menu[\"side dish\"][sideDish][\"price\"]) \n    + parseInt(Menu[\"drink\"][drink][\"price\"]));\n\n    setTotalCalories(parseInt(Menu[\"main dish\"][mainDish][\"calories\"]) + parseInt(Menu[\"side dish\"][sideDish][\"calories\"]) \n    + parseInt(Menu[\"drink\"][drink][\"calories\"]));\n  };\n\n  const ModalConfirmContent = (props) =>{\n\n    return <Fragment> \n      <div className = {classes.total}>\n        <span> Total Price is : {totalPrice}₪ </span>\n      </div>\n      <div className = {classes.total}>\n        <span> Total Calories is : {totalCalories} kcal  </span> \n      </div>\n      <div className= {classes.actions}>\n        <button className= {classes.button} onClick = {props.onClose}> Cancel </button>\n        <button className= {classes.button} > Confirm </button>\n      </div>\n    </Fragment>\n  }\n\n  return (\n    <Fragment>\n      <Header/>\n      {confirmMessageIsShown && <Modal><ModalConfirmContent onClose = {hideConfirmMessageHandler}/></Modal>}\n      {!error && successMessageIsShown && <Modal><ModalSuccessContent onClose = {hideSuccessMessageHandler}/></Modal>}\n      {error  && errorMessageIsShown && !confirmMessageIsShown && <Modal> <ModalErrorContent onClose = {hideErrorMessageHandler}/> </Modal>}\n      <NewOrder onConfirmOrder = {confirmOrder} onAddOrder = {addOrderHandler}/>\n    </Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}